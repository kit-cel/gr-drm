<?xml version='1.0' encoding='ASCII'?>
<block>
  <name>DRM MLC 16-QAM</name>
  <key>drm_mlc_16qam_vbvc</key>
  <category>drm</category>
  <import>from drm_mlc_16qam_vbvc import drm_mlc_16qam_vbvc</import>
  <make>drm_mlc_16qam_vbvc(
	vlen_in=$vlen_in,
	vlen_out=$vlen_out,
	n_tailbits=$n_tailbits,
	denom_mother_code_rate=$denom_mother_code_rate,
	gen_poly=$gen_poly,
	bits_per_symbol=$bits_per_symbol,
	N=$N,
	map_tab=$map_tab,
	pp_0=$pp_0,
	pp_0_tail=$pp_0_tail,
	pp_1=$pp_1,
	pp_1_tail=$pp_1_tail,
	part_len_top=$part_len_top,
	part_len_bot=$part_len_bot,
	M_total=$M_total,
	interl_seq_0_2=$interl_seq_0_2,
	interl_seq_1_2=$interl_seq_1_2,
)</make>
  <callback>set_vlen_in($vlen_in)</callback>
  <callback>set_vlen_out($vlen_out)</callback>
  <callback>set_n_tailbits($n_tailbits)</callback>
  <callback>set_denom_mother_code_rate($denom_mother_code_rate)</callback>
  <callback>set_gen_poly($gen_poly)</callback>
  <callback>set_bits_per_symbol($bits_per_symbol)</callback>
  <callback>set_N($N)</callback>
  <callback>set_map_tab($map_tab)</callback>
  <callback>set_pp_0($pp_0)</callback>
  <callback>set_pp_0_tail($pp_0_tail)</callback>
  <callback>set_pp_1($pp_1)</callback>
  <callback>set_pp_1_tail($pp_1_tail)</callback>
  <callback>set_part_len_top($part_len_top)</callback>
  <callback>set_part_len_bot($part_len_bot)</callback>
  <callback>set_M_total($M_total)</callback>
  <callback>set_interl_seq_0_2($interl_seq_0_2)</callback>
  <callback>set_interl_seq_1_2($interl_seq_1_2)</callback>
  <param>
    <name>Input vector length</name>
    <key>vlen_in</key>
    <value>1</value>
    <type>int</type>
  </param>
  <param>
    <name>output vector length</name>
    <key>vlen_out</key>
    <value>1</value>
    <type>int</type>
  </param>
  <param>
    <name>n_tailbits</name>
    <key>n_tailbits</key>
    <value>6</value>
    <type>int</type>
  </param>
  <param>
    <name>denom_mother_code_rate</name>
    <key>denom_mother_code_rate</key>
    <value>6</value>
    <type>int</type>
  </param>
  <param>
    <name>Generator polynomial (dec)</name>
    <key>gen_poly</key>
    <value>(91, 121, 101, 91, 121, 101)</value>
    <type>int_vector</type>
  </param>
  <param>
    <name>Bits per symbol</name>
    <key>bits_per_symbol</key>
    <value>0</value>
    <type>int</type>
  </param>
  <param>
    <name>Number of QAM cells</name>
    <key>N</key>
    <value>1</value>
    <type>int</type>
  </param>
  <param>
    <name>Mapping table</name>
    <key>map_tab</key>
    <value>0</value>
    <type>raw</type>
  </param>
  <param>
    <name>Puncturing pattern 0</name>
    <key>pp_0</key>
    <value>0</value>
    <type>raw</type>
  </param>
  <param>
    <name>Tail bit puncturing pattern 0</name>
    <key>pp_0_tail</key>
    <value>0</value>
    <type>raw</type>
  </param>
  <param>
    <name>Puncturing pattern 1</name>
    <key>pp_1</key>
    <value>0</value>
    <type>raw</type>
  </param>
  <param>
    <name>Tail bit puncturing pattern 1</name>
    <key>pp_1_tail</key>
    <value>0</value>
    <type>raw</type>
  </param>
  <param>
    <name>Partitioning len top</name>
    <key>part_len_top</key>
    <value>1</value>
    <type>int</type>
  </param>
  <param>
    <name>Length of bottom output</name>
    <key>part_len_bot</key>
    <value>1</value>
    <type>int</type>
  </param>
  <param>
    <name>M_total</name>
    <key>M_total</key>
    <value>0</value>
    <type>raw</type>
  </param>
  <param>
    <name>Interleaver sequence 0</name>
    <key>interl_seq_0_2</key>
    <value>range(2)</value>
    <type>raw</type>
  </param>
  <param>
    <name>Interleaver sequence 1</name>
    <key>interl_seq_1_2</key>
    <value>range(2)</value>
    <type>raw</type>
  </param>
  <sink>
    <name>in</name>
    <type>byte</type>
    <vlen>$vlen_in</vlen>
  </sink>
  <source>
    <name>out</name>
    <type>complex</type>
    <vlen>$vlen_out</vlen>
  </source>
  <doc>Felix Wunsch
performs multilevelcoding (16-QAM)
drm_mlc_16qam_vbvc.py</doc>
</block>
